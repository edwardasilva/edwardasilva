#!/usr/bin/env bash

# Resume & Website Builder
# Builds the complete resume and website system

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Error handler
error_handler() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

# Log messages with colors
log() {
    local level="$1"
    local message="$2"
    local timestamp="$(date '+%H:%M:%S')"
    
    case "$level" in
        "info")
            echo -e "${BLUE}[${timestamp}] ${message}${NC}"
            ;;
        "success")
            echo -e "${GREEN}[${timestamp}] ${message}${NC}"
            ;;
        "warning")
            echo -e "${YELLOW}[${timestamp}] ${message}${NC}"
            ;;
        "error")
            echo -e "${RED}[${timestamp}] ${message}${NC}"
            ;;
        "step")
            echo -e "${PURPLE}[${timestamp}] ${message}${NC}"
            ;;
        "clean")
            echo -e "${CYAN}[${timestamp}] ${message}${NC}"
            ;;
        *)
            echo -e "${WHITE}[${timestamp}] ${message}${NC}"
            ;;
    esac
}

# Print header
echo -e "${PURPLE}================================================${NC}"
echo -e "${PURPLE}          Resume & Website Builder          ${NC}"
echo -e "${PURPLE}================================================${NC}"
echo

# Check we're in the right directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"
log "info" "Starting build in: $SCRIPT_DIR"

# Check BUILD directory exists
if [[ ! -d "BUILD" ]]; then
    error_handler "BUILD directory not found"
fi

# Check required files
log "step" "Checking requirements..."
if [[ ! -f "resume-data.json" ]]; then
    error_handler "resume-data.json not found"
fi

if [[ ! -f "BUILD/package.json" ]]; then
    error_handler "BUILD/package.json not found"
fi

# Install dependencies if needed
log "step" "Checking dependencies..."
cd BUILD
if [[ ! -d "node_modules" ]]; then
    log "info" "Installing dependencies..."
    if ! npm install >/dev/null 2>&1; then
        error_handler "Failed to install dependencies"
    fi
    log "success" "Dependencies installed"
fi

# Build resume
log "step" "Building resume..."
if ! npm run build:resume >/dev/null 2>&1; then
    error_handler "Resume build failed"
fi
log "success" "Resume and README generated"

# Build website
log "step" "Building website..."
if ! npm run build:site >/dev/null 2>&1; then
    error_handler "Website build failed"
fi
log "success" "Website generated"

cd "$SCRIPT_DIR"
log "success" "All builds completed"

# Compile PDF if LaTeX available
log "step" "Compiling PDF..."
cd resume
if command -v pdflatex >/dev/null 2>&1; then
    log "info" "Running pdflatex (first pass)..."
    if pdflatex -interaction=nonstopmode Edward_Silva_Resume.tex >/dev/null 2>&1; then
        sleep 1
        log "info" "Running pdflatex (second pass)..."
        if pdflatex -interaction=nonstopmode Edward_Silva_Resume.tex >/dev/null 2>&1; then
            sleep 1
            log "success" "PDF generated successfully"
        else
            log "warning" "Second PDF pass failed"
        fi
    else
        log "warning" "PDF compilation failed"
    fi
else
    log "warning" "pdflatex not found, skipping PDF"
fi
cd "$SCRIPT_DIR"

sleep 1


# Compile PDFs for all .tex files in cover letters directory
log "step" "Compiling all Cover Letter PDFs..."
cd coverLetters
if command -v pdflatex >/dev/null 2>&1; then
    for tex_file in *.tex; do
        if [[ -f "$tex_file" ]]; then
            log "info" "Running pdflatex (first pass) for $tex_file..."
            if pdflatex -interaction=nonstopmode "$tex_file" >/dev/null 2>&1; then
                sleep 1
                log "info" "Running pdflatex (second pass) for $tex_file..."
                if pdflatex -interaction=nonstopmode "$tex_file" >/dev/null 2>&1; then
                    sleep 1
                    log "success" "PDF for $tex_file generated successfully"
                else
                    log "warning" "Second PDF pass for $tex_file failed"
                fi
            else
                log "warning" "PDF compilation for $tex_file failed"
            fi
        fi
    done
else
    log "warning" "pdflatex not found, skipping Cover Letter PDFs"
fi
cd "$SCRIPT_DIR"

# Clean up auxiliary files for cover letters
log "clean" "Cleaning up Cover Letter auxiliary files..."
cover_letter_files_cleaned=0
cd coverLetters
for aux_file in *.aux *.log *.out *.synctex.gz; do
    if [[ -f "$aux_file" ]]; then
        if rm -f "$aux_file" 2>/dev/null; then
            cover_letter_files_cleaned=$((cover_letter_files_cleaned + 1))
        fi
    fi
done
cd "$SCRIPT_DIR"

log "success" "Cover Letter build complete! Cleaned $cover_letter_files_cleaned files."

sleep 1

# Clean up auxiliary files
log "clean" "Cleaning up..."
files_cleaned=0

if rm -f resume/Edward_Silva_Resume.aux 2>/dev/null; then
    files_cleaned=$((files_cleaned + 1))
fi
if rm -f resume/Edward_Silva_Resume.log 2>/dev/null; then
    files_cleaned=$((files_cleaned + 1))
fi
if rm -f resume/Edward_Silva_Resume.out 2>/dev/null; then
    files_cleaned=$((files_cleaned + 1))
fi
if rm -f resume/Edward_Silva_Resume.synctex.gz 2>/dev/null; then
    files_cleaned=$((files_cleaned + 1))
fi

log "success" "Build complete! Cleaned $files_cleaned files."

# Print summary
echo
log "info" "Build Summary:"
log "info" "✓ LaTeX Resume: resume/Edward_Silva_Resume.tex"
log "info" "✓ PDF Resume: resume/Edward_Silva_Resume.pdf"
log "info" "✓ Website: index.html"
log "info" "✓ Documentation: README.md"

echo
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}               Build Complete!                  ${NC}"
echo -e "${GREEN}================================================${NC}"
