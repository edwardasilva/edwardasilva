#!/usr/bin/env bash
# build-and-clean.sh
# This script builds the project and cleans up auxiliary files, keeping only HTML, JS, CSS, and PDF files.

set -euo pipefail

# Colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Function to handle errors
error_handler() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

# Function to log messages with colors
log() {
    local level="$1"
    local message="$2"
    local timestamp="$(date '+%H:%M:%S')"
    
    case "$level" in
        "info")
            echo -e "${BLUE}[${timestamp}] ${message}${NC}"
            ;;
        "success")
            echo -e "${GREEN}[${timestamp}] ${message}${NC}"
            ;;
        "warning")
            echo -e "${YELLOW}[${timestamp}] ${message}${NC}"
            ;;
        "error")
            echo -e "${RED}[${timestamp}] ${message}${NC}"
            ;;
        "step")
            echo -e "${PURPLE}[${timestamp}] ${message}${NC}"
            ;;
        "clean")
            echo -e "${CYAN}[${timestamp}] ${message}${NC}"
            ;;
        *)
            echo -e "${WHITE}[${timestamp}] ${message}${NC}"
            ;;
    esac
}

# Print header
echo -e "${PURPLE}================================================${NC}"
echo -e "${PURPLE}                Resume Builder                ${NC}"
echo -e "${PURPLE}================================================${NC}"
echo

# 1. Ensure we're in the project root (easilva.com/)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"
log "info" "Starting build process in: $SCRIPT_DIR"

# 2. Check if BUILD directory exists
if [[ ! -d "BUILD" ]]; then
    error_handler "BUILD directory not found"
fi

# 3. Run the build command in the BUILD directory
log "step" "Running build process..."
cd BUILD
if ! npm run build >/dev/null 2>&1; then
    error_handler "Build failed"
fi
cd "$SCRIPT_DIR"
log "success" "Build completed successfully"

# 4. Compile LaTeX to PDF
log "step" "Compiling LaTeX resume to PDF..."
cd resume
if command -v pdflatex >/dev/null 2>&1; then
    log "info" "Running pdflatex..."
    if pdflatex -interaction=nonstopmode Edward_Silva_Resume.tex >/dev/null 2>&1; then
        log "success" "PDF resume generated successfully"
    else
        log "warning" "PDF compilation failed, but build completed"
    fi
else
    log "warning" "pdflatex not found, skipping PDF generation"
fi
cd "$SCRIPT_DIR"

# 5. Clean up auxiliary files
log "clean" "Cleaning up auxiliary files..."

# Clean up auxiliary files
files_cleaned=0

# Clean up specific LaTeX auxiliary files
log "clean" "Removing auxiliary files..."

rm -f resume/Edward_Silva_Resume.aux 2>/dev/null && ((files_cleaned++)) && log "clean" "Removed: Edward_Silva_Resume.aux"
rm -f resume/Edward_Silva_Resume.log 2>/dev/null && ((files_cleaned++)) && log "clean" "Removed: Edward_Silva_Resume.log"
rm -f resume/Edward_Silva_Resume.out 2>/dev/null && ((files_cleaned++)) && log "clean" "Removed: Edward_Silva_Resume.out"
rm -f resume/Edward_Silva_Resume.synctex.gz 2>/dev/null && ((files_cleaned++)) && log "clean" "Removed: Edward_Silva_Resume.synctex.gz"

log "success" "Build complete! Cleaned $files_cleaned auxiliary files."

# Print footer
echo
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}                Build Complete!                ${NC}"
echo -e "${GREEN}================================================${NC}"
